?stats
?`stats-package`
library(helo = "stats")
library(help = "stats")
plot(lm_auto_quant)
#Generate diagnostic plots for the regression of Auto_Quant
par(mfrow = c(2,2))
plot(lm_auto_quant)
#Generate diagnostic plots for the regression of Auto_Quant
plot(lm_auto_quant)
#Create a scatterplot matrix of variablies in Auto
pairs(Auto)
str(Auto_Quant)
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant) |>
summary()
#
#lm_auto_quant3 <- lm(mpg ~ . + , data = Auto_Quant)
#summary(lm_auto_quant3)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant) |>
summary()
#
#lm_auto_quant3 <- lm(mpg ~ . + , data = Auto_Quant)
#summary(lm_auto_quant3)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)|>
summary()
#
#lm_auto_quant3 <- lm(mpg ~ . + , data = Auto_Quant)
#summary(lm_auto_quant3)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary()
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)%>%
summary()
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)|>
summary()
#
#lm_auto_quant3 <- lm(mpg ~ . + , data = Auto_Quant)
#summary(lm_auto_quant3)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#
#lm_auto_quant3 <- lm(mpg ~ . + , data = Auto_Quant)
#summary(lm_auto_quant3)
str(lm_auto_quant2)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#
lm_auto_quant3 <- lm(mpg ~ . + , data = Auto_Quant)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#
lm_auto_quant3 <- lm(mpg ~ . + weight:acceleration, data = Auto_Quant)
summary(lm_auto_quant3)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#A regression model with an interaction between weight & acceleration
lm_auto_quant3 <- lm(mpg ~ . + weight:acceleration, data = Auto_Quant)
summary(lm_auto_quant3)
#
lm_auto_quant4 <- lm(mpg ~ . + year:cylinders, data = Auto_Quant)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#A regression model with an interaction between weight & acceleration
lm_auto_quant3 <- lm(mpg ~ . + weight:acceleration, data = Auto_Quant)
summary(lm_auto_quant3)
#
lm_auto_quant4 <- lm(mpg ~ . + year:cylinders, data = Auto_Quant)
summary(lm_auto_quant4)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#A regression model with an interaction between weight & acceleration
lm_auto_quant3 <- lm(mpg ~ . + weight:acceleration, data = Auto_Quant)
summary(lm_auto_quant3)
#
lm_auto_quant4 <- lm(mpg ~ . + year:origin, data = Auto_Quant)
summary(lm_auto_quant4)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#A regression model with an interaction between weight & acceleration
lm_auto_quant3 <- lm(mpg ~ . + weight:acceleration, data = Auto_Quant)
summary(lm_auto_quant3)
#
lm_auto_quant4 <- lm(mpg ~ . + horsepower:year, data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant2)
plot(lm_auto_quant3)
#Create linear regression equation and view summary statistics
lm_auto_quant <- lm(mpg ~ ., data = Auto_Quant)
summary(lm_auto_quant)
#
lm_auto_quant4 <- lm(mpg ~ . + I(weight^2), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#
lm_auto_quant4 <- lm(mpg ~ . + log(weight), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#
lm_auto_quant4 <- lm(mpg ~ . , data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#
lm_auto_quant4 <- lm(mpg ~ . + sqrt(weight), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#
lm_auto_quant4 <- lm(mpg ~ . + I(weight^2), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#
lm_auto_quant4 <- lm(mpg ~ . + I(weight^2), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
anova(lm_auto_quant,lm_auto_quant4)
#A regression with an addition squared term for Weight
lm_auto_quant4 <- lm(mpg ~ . + I(weight^2), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#Use Analysis of Variance to compare the new model to the original
anova(lm_auto_quant,lm_auto_quant4)
lm_auto_quant5 <- lm(mpg ~ . + log(displacement, data = Auto_Quant))
#A regression with an addition squared term for Weight
lm_auto_quant4 <- lm(mpg ~ . + I(weight^2), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#Use Analysis of Variance to compare the new model to the original
anova(lm_auto_quant,lm_auto_quant4)
lm_auto_quant5 <- lm(mpg ~ . + log(displacement), data = Auto_Quant)
summary(lm_auto_quant5)
plot(lm_auto_quant5)
#A regression with an addition squared term for Weight
lm_auto_quant4 <- lm(mpg ~ . + I(weight^2), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#Use Analysis of Variance to compare the new model to the original
anova(lm_auto_quant,lm_auto_quant4)
#
lm_auto_quant5 <- lm(mpg ~ . + sqrt(displacement), data = Auto_Quant)
summary(lm_auto_quant5)
plot(lm_auto_quant5)
anova(lm_auto_quant,lm_auto_quant5)
?rnorm
set.seed(1)
x <- rnorm(100)
view(x)
x
set.seed(1)
x <- rnorm(100, 0, sqrt(0.25))
#sd is square root of the variance
eps <- rnorm(100, mean = 0, sd = sqrt(0.25))
#N(0,1) are the default arguments in the rnorm() function
x <- rnorm(100)
#N(0,1) are the default arguments in the rnorm() function
x <- rnorm(100)
y <- -1 + 0.5x + eps
y <- -1 + 0.5*x + eps
y
head(y)
str(y)
length(y)
plot(x,y)
lm_pr13 <- lm(y ~ x)
lm_pr13 <- lm(y ~ x)
abline(lm_pr13)
lm_pr13 <- lm(y ~ x)
abline(lm_pr13, lwd = 3, col = "red"")
lm_pr13 <- lm(y ~ x)
abline(lm_pr13, lwd = 3, col = "red")
lm_pr13 <- lm(y ~ x)
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
lm_pr13 <- lm(y ~ x)
summary(lm_pr13)
abline(lm_pr13, lwd = 3, col = "red")
lm_pr13 <- lm(y ~ x)
summary(lm_pr13)
abline(lm_pr13, lwd = 3, col = "red")
plot(lm_pr13)
abline(lm_pr13, lwd = 3, col = "red")
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
#Create a simple scatterplot
plot(x,y)
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(y, lwd = 2, col = "black")
?abline
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 1, col = "black")
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend()
?legend
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend("Least Squares")
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(legend = "Least Squares")
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(1,95, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(1,95,legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(1, 95, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-3, 0, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-3, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-3, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"))
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"),lty = 1:2)
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"),lty = 1:3)
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"),lty = 1:4)
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"),lty = 1:2)
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"),lty = 1:1)
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"),lty = 1)
plot(x,y)
abline(lm_pr13, lwd = 3, col = "red")
abline(-1, 0.5, lwd = 2, col = "black")
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .8)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .5)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend(-2.5, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend(-2, 0.5, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend("top left", legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend("topleft", legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend("topleft", inset = .05, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
lm_pr13_poly <- lm(y ~ I(x^2)+x)
summary(lm_pr13_poly)
lm_pr13 <- lm(y ~ x)
summary(lm_pr13)
#Create vector with 100 observations, mean = 0, variance = 1
x <- rnorm(100)
#Create vector with 100 observations, mean = 0, variance = 0.25
eps <- rnorm(100, mean = 0, sd = sqrt(0.1))
eps
#Create vector with 100 observations, mean = 0, variance = 1
x <- rnorm(100)
#Create vector with 100 observations, mean = 0, variance = 0.25
eps <- rnorm(100, mean = 0, sd = sqrt(0.05))
eps
#Create vector with 100 observations, mean = 0, variance = 1
x <- rnorm(100)
#Create vector with 100 observations, mean = 0, variance = 0.25
eps <- rnorm(100, mean = 0, sd = sqrt(0.1))
#Create vector with 100 observations, mean = 0, variance = 1
x <- rnorm(100)
#Create vector with 100 observations, mean = 0, variance = 0.25
eps <- rnorm(100, mean = 0, sd = sqrt(0.05))
#Create new vector y
y <- -1 + 0.5*x + eps
#Create a simple scatterplot
plot(x,y)
#Create a regression model
lm_pr13 <- lm(y ~ x)
summary(lm_pr13)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend("topleft", inset = .05, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
#Create vector with 100 observations, mean = 0, variance = 1
x <- rnorm(100)
#Create vector with 100 observations, mean = 0, variance = 0.5
eps <- rnorm(100, mean = 0, sd = sqrt(0.5))
#Create new vector y
y <- -1 + 0.5*x + eps
#Create a simple scatterplot
plot(x,y)
#Create a regression model
lm_pr13 <- lm(y ~ x)
summary(lm_pr13)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend("topleft", inset = .05, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
confint(lm_pr13)
confint1
#| include: false
#Load libraries for problem set.
library(ISLR2)
#Create a scatterplot matrix of variablies in Auto
pairs(Auto)
#Create a new dataset without the last column (Name)
Auto_Quant <- Auto[,1:8]
#Preview new table to make sure Name variable was dropped
str(Auto_Quant)
#Generate a correlation table
cor(Auto_Quant)
#Create linear regression equation and view summary statistics
lm_auto_quant <- lm(mpg ~ ., data = Auto_Quant)
summary(lm_auto_quant)
#Generate diagnostic plots for the regression of Auto_Quant
plot(lm_auto_quant)
#A regression model with an interaction between acceleration & horsepower
lm_auto_quant2 <- lm(mpg ~ . + acceleration:horsepower, data = Auto_Quant)
summary(lm_auto_quant2)
#A regression model with an interaction between weight & acceleration
lm_auto_quant3 <- lm(mpg ~ . + weight:acceleration, data = Auto_Quant)
summary(lm_auto_quant3)
#A regression with an addition squared term for Weight
lm_auto_quant4 <- lm(mpg ~ . + I(weight^2), data = Auto_Quant)
summary(lm_auto_quant4)
plot(lm_auto_quant4)
#Use Analysis of Variance to compare the new model to the original
anova(lm_auto_quant,lm_auto_quant4)
#
lm_auto_quant5 <- lm(mpg ~ . + sqrt(displacement), data = Auto_Quant)
summary(lm_auto_quant5)
plot(lm_auto_quant5)
anova(lm_auto_quant,lm_auto_quant5)
set.seed(1)
#Create vector with 100 observations, mean = 0, variance = 1
#N(0,1) are the default arguments in the rnorm() function so don't need to include
x <- rnorm(100)
#preview x
str(x)
#Create vector with 100 observations, mean = 0, variance = 0.25
#sd is square root of the variance
eps <- rnorm(100, mean = 0, sd = sqrt(0.25))
#preview eps
str(eps)
#Create new vector y
y <- -1 + 0.5*x + eps
#preview y
str(y)
#Create a simple scatterplot
plot(x,y)
lm_pr13 <- lm(y ~ x)
summary(lm_pr13)
confint1 <- confint(lm_pr13)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend("topleft", inset = .05, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
lm_pr13_poly <- lm(y ~ I(x^2)+x)
summary(lm_pr13_poly)
#Create vector with 100 observations, mean = 0, variance = 1
x <- rnorm(100)
#Create vector with 100 observations, mean = 0, variance = 0.05
eps <- rnorm(100, mean = 0, sd = sqrt(0.05))
#Create new vector y
y <- -1 + 0.5*x + eps
#Create a simple scatterplot
plot(x,y)
#Create a regression model
lm_pr13 <- lm(y ~ x)
summary(lm_pr13)
confint2 <- confint(lm_pr13)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend("topleft", inset = .05, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
#Create vector with 100 observations, mean = 0, variance = 1
x <- rnorm(100)
#Create vector with 100 observations, mean = 0, variance = 0.5
eps <- rnorm(100, mean = 0, sd = sqrt(0.5))
#Create new vector y
y <- -1 + 0.5*x + eps
#Create a simple scatterplot
plot(x,y)
#Create a regression model
lm_pr13 <- lm(y ~ x)
summary(lm_pr13)
confint3 <- confint(lm_pr13)
#Create a plot of x and y
plot(x,y)
#Add the estimated regression line
abline(lm_pr13, lwd = 3, col = "red")
#Add the population regression line
abline(-1, 0.5, lwd = 2, col = "black")
#Add a legend
legend("topleft", inset = .05, legend = c("Estimated Regression", "Population Regression"), col = c("red","black"), lty = 1, cex = .6)
confint1
confint2
confint3
view(Bikeshare)
library(ISLR2)
library(tidyverse)
glimpse(Bikeshare)
