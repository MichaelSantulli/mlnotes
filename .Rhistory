#Run a regression with a squared predictor term
lm.fit2 <- lm(medv ~ lstat + I(lstat^2))
#Run a regression with a squared predictor term
lm.fit2 <- lm(medv ~ lstat + I(lstat^2))
#| output = FALSE
#Load packages for chapter labs
library("ISLR2") #Introduction to Statistical Learning datasets'
library("tidyverse")
x <- seq(1,10)
x
x <- 1:10
x
x <- seq(-pi, pi, length = 50)
y <- x
f <- outer(x, y, function(x, y) cos(y) / (1 + x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa <- (f - t(f)) / 2
contour(x, y, fa, nlevels = 15)
image(x, y, fa)
persp(x, y, fa)
persp(x, y, fa, theta = 30)
persp(x, y, fa, theta = 30, phi = 20)
persp(x, y, fa, theta = 30, phi = 70)
persp(x, y, fa, theta = 30, phi = 40)
library(MASS)
#view the first 10 observations of the dataset
head(Boston)
#Create a regression equation
attach(Boston)
lm.fit <- lm(medv ~ lstat)
#View the regression results
lm.fit
#View details about the regression
summary(lm.fit)
#See what is stored in the lm.fit list
names(lm.fit)
#Function to view the coefficients of lm.fit
coef(lm.fit)
#View the confidence interval
confint(lm.fit)
#Generate confidence intervals for given values of lstat
predict(lm.fit, data.frame(lstat = (c(5, 10, 15))), interval = "confidence")
#Generate prediction intervals for given values of lstat
predict(lm.fit, data.frame(lstat = (c(5, 10, 15))), interval = "prediction")
#plot
plot(lstat, medv)
#Add the least squares line to the plot
abline(lm.fit, lwd = 3, col = "red")
#Use 'col =' to change the color of the points
plot(lstat, medv, col = "red")
#Use 'pch =' to change the shape of the points
plot(lstat, medv, pch = 20)
#Define the point shape directly
plot(lstat, medv, pch = "+")
#Define the point shape with a number
plot(1:20, 1:20, pch = 1:20)
par(mfrow = c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
#Run a regression with specified predictors
lm.fit <- lm(medv ~ lstat + age, data = Boston)
summary(lm.fit)
#Run a regression on all the predictor variables in the dataset
lm.fit <- lm(formula = medv ~ ., data = Boston)
summary(lm.fit)
library(car)
#Calculate variance inflation factors
vif(lm.fit)
#Run the regression all predictors except one (age) using the "-" sign
lm.fit1 <- lm(medv ~ . - age, data = Boston)
summary(lm.fit1)
#Another way to change the model using update()
lm.fit1 <- update(lm.fit, ~ . - age)
#Run a regression with a predictor variable
summary(lm(medv ~ lstat*age, data = Boston))
#Run a regression with a squared predictor term
lm.fit2 <- lm(medv ~ lstat + I(lstat^2))
summary(lm.fit2)
#Use anova() to see if the quadratic fit is better than the original linear fit
lm.fit <- lm(medv ~ lstat)
anova(lm.fit, lm.fit2)
par(mfrow = c(2,2))
plot(lm.fit2)
lm.fit5 <- lm(medv ~ poly(lstat, 5))
summary(lm.fit5)
#Preview the Carseats dataset
head(Carseats)
str(Carseats)
#Preview the Carseats dataset
str(Carseats)
#Preview the Carseats dataset with information about carseat sales
str(Carseats)
lm.fit <- lm(Sales ~ . + Income:Advertising + Price:Age, data = Carseats)
summary(lm.fit)
#Preview the Carseats dataset with information about carseat sales
str(Carseats)
#A regression on Carseats data with all variables and some interaction terms
lm.fit <- lm(Sales ~ . + Income:Advertising + Price:Age, data = Carseats)
summary(lm.fit)
#
attach(Carseats)
contrasts(ShelveLoc)
contrasts(Urban)
LoadLibraries()
#Write a function to load relevant libraries
LoadLibraries <- function() {
library(ISLR2)
library(MASS)
print("The libraries have been loaded.")
}
LoadLibraries()
